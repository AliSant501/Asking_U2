package com.example.asking

import android.widget.Toast
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.database.FirebaseDatabase

// Menu Principal
@Composable
fun BakingScreen() {
    var currentScreen by remember { mutableStateOf("menu") }
    var score by remember { mutableStateOf(0) }
    val currentUser = FirebaseAuth.getInstance().currentUser
    val userName = currentUser?.displayName ?: "Usuario no autenticado"

    when (currentScreen) {
        "menu" -> MainMenu(userName, onNavigate = { currentScreen = it })
        "game" -> QuizScreen(onGameEnd = { finalScore ->
            score = finalScore
            saveScoreToFirebase(userName, finalScore)
            currentScreen = "menu"
        })
        "records" -> RecordsScreen(onBack = { currentScreen = "menu" })
        "options" -> UserOptionsScreen(userName, onBack = { currentScreen = "menu" })
    }
}

@Composable
fun MainMenu(userName: String, onNavigate: (String) -> Unit) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(24.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            elevation = CardDefaults.cardElevation(8.dp),
            colors = CardDefaults.cardColors(MaterialTheme.colorScheme.surfaceVariant)
        ) {
            Column(
                modifier = Modifier.padding(24.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "Bienvenido a Asking, $userName",
                    style = MaterialTheme.typography.headlineMedium,
                    textAlign = TextAlign.Center
                )
                Spacer(modifier = Modifier.height(24.dp))

                MenuButton("üéÆ Nuevo Juego", onClick = { onNavigate("game") })
                Spacer(modifier = Modifier.height(16.dp))

                MenuButton("üèÜ Ver R√©cords", onClick = { onNavigate("records") })
                Spacer(modifier = Modifier.height(16.dp))

                MenuButton("‚öô Opciones", onClick = { onNavigate("options") })
            }
        }
    }
}

@Composable
fun MenuButton(text: String, onClick: () -> Unit) {
    Button(
        onClick = onClick,
        modifier = Modifier.fillMaxWidth(0.8f),
        colors = ButtonDefaults.buttonColors(MaterialTheme.colorScheme.primary),
        shape = RoundedCornerShape(12.dp),
        elevation = ButtonDefaults.buttonElevation(4.dp)
    ) {
        Text(text, style = MaterialTheme.typography.bodyLarge)
    }
}


// Juego de Preguntas

@Composable
fun QuizScreen(onGameEnd: (Int) -> Unit) {
    val questions = remember { getRandomQuestions(5) }
    var currentQuestionIndex by remember { mutableStateOf(0) }
    var score by remember { mutableStateOf(0) }

    if (currentQuestionIndex < questions.size) {
        val question = questions[currentQuestionIndex]

        Column(
            modifier = Modifier
                .fillMaxSize()
                .background(MaterialTheme.colorScheme.background)
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(16.dp, Alignment.CenterVertically)
        ) {
            // N√∫mero de pregunta
            Text(
                text = "Pregunta ${currentQuestionIndex + 1} de ${questions.size}",
                style = MaterialTheme.typography.titleLarge,
                color = MaterialTheme.colorScheme.primary
            )

            // Tarjeta con la pregunta
            Card(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(16.dp),
                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)
            ) {
                Text(
                    text = question.text,
                    modifier = Modifier.padding(16.dp),
                    style = MaterialTheme.typography.headlineMedium,
                    textAlign = TextAlign.Center
                )
            }

            // Opciones de respuesta
            question.options.forEach { option ->
                Button(
                    onClick = {
                        if (option == question.correctAnswer) score++
                        currentQuestionIndex++ // Pasa a la siguiente pregunta
                    },
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(12.dp)
                ) {
                    Text(text = option, style = MaterialTheme.typography.bodyLarge)
                }
            }
        }
    } else {
        // Pantalla de finalizaci√≥n del juego
        Column(
            modifier = Modifier
                .fillMaxSize()
                .background(MaterialTheme.colorScheme.background)
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            val gold = Color(0xFFFFD700)
            Text("üéâ ¬°Juego Terminado!", style = MaterialTheme.typography.headlineMedium.copy(color = gold))
            Text("üèÜ Puntuaci√≥n: $score", style = MaterialTheme.typography.headlineMedium.copy(color = gold))
            Spacer(modifier = Modifier.height(16.dp))

            Button(
                onClick = { onGameEnd(score) },
                colors = ButtonDefaults.buttonColors(MaterialTheme.colorScheme.primary),
                shape = RoundedCornerShape(12.dp)
            ) {
                Text("üè† Volver al Men√∫", style = MaterialTheme.typography.bodyLarge)
            }
        }
    }
}

// üü¢ Preguntas aleatorias
data class Question(val text: String, val options: List<String>, val correctAnswer: String)

fun getRandomQuestions(count: Int): List<Question> {
    val allQuestions = listOf(
        Question("¬øQui√©n pint√≥ la Mona Lisa?", listOf("Leonardo da Vinci", "Pablo Picasso", "Vincent van Gogh"), "Leonardo da Vinci"),
        Question("¬øCu√°l es el planeta m√°s grande del sistema solar?", listOf("Marte", "J√∫piter", "Saturno"), "J√∫piter"),
        Question("¬øCu√°ntos corazones tiene un pulpo?", listOf("Uno", "Dos", "Tres"), "Tres"),
        Question("¬øCu√°l es el animal terrestre m√°s r√°pido?", listOf("Guepardo", "Le√≥n", "Caballo"), "Guepardo"),
        Question("¬øCu√°l es el r√≠o m√°s largo del mundo?", listOf("Amazonas", "Nilo", "Yangts√©"), "Amazonas"),
        Question("¬øQui√©n escribi√≥ 'Don Quijote de la Mancha'?", listOf("Cervantes", "Shakespeare", "Borges"), "Cervantes"),
        Question("¬øCu√°l es el metal m√°s ligero?", listOf("Aluminio", "Litio", "Hierro"), "Litio"),
        Question("¬øEn qu√© a√±o lleg√≥ el hombre a la Luna?", listOf("1965", "1969", "1972"), "1969"),
        Question("¬øQu√© gas respiramos principalmente?", listOf("Ox√≠geno", "Nitr√≥geno", "Di√≥xido de carbono"), "Ox√≠geno"),
        Question("¬øQu√© pa√≠s tiene forma de bota?", listOf("Espa√±a", "Italia", "Francia"), "Italia"),
        Question("¬øCu√°l es el oc√©ano m√°s grande del mundo?", listOf("Atl√°ntico", "Pac√≠fico", "√çndico"), "Pac√≠fico"),
        Question("¬øCu√°ntos continentes hay en la Tierra?", listOf("5", "6", "7"), "7"),
        Question("¬øQu√© inventor cre√≥ la bombilla el√©ctrica?", listOf("Nikola Tesla", "Thomas Edison", "Albert Einstein"), "Thomas Edison"),
        Question("¬øCu√°l es el hueso m√°s largo del cuerpo humano?", listOf("F√©mur", "Radio", "H√∫mero"), "F√©mur"),
        Question("¬øCu√°l es la capital de Australia?", listOf("S√≠dney", "Melbourne", "Canberra"), "Canberra")
    )

    return allQuestions.shuffled().take(count)
}

// üü¢ Guardar Puntuaci√≥n en Firebase
fun saveScoreToFirebase(user: String, score: Int) {
    val db = FirebaseDatabase.getInstance("https://asking-ffe15-default-rtdb.firebaseio.com/").reference
    val newEntry = db.child("scores").push()
    newEntry.setValue(mapOf("Usuario" to user, "Puntuaci√≥n" to score))
}


// üü¢ Pantalla de R√©cords (Corrigiendo Firebase)

@Composable
fun RecordsScreen(onBack: () -> Unit) {
    var scoresList by remember { mutableStateOf<List<Pair<String, Int>>>(emptyList()) }

    LaunchedEffect(Unit) {
        val database = FirebaseDatabase.getInstance("https://asking-ffe15-default-rtdb.firebaseio.com/")
        val scoresRef = database.getReference("scores")

        scoresRef.get().addOnSuccessListener { dataSnapshot ->
            val scores = mutableListOf<Pair<String, Int>>()
            dataSnapshot.children.forEach { child ->
                val user = child.child("Usuario").getValue(String::class.java) ?: "Desconocido"
                val points = child.child("Puntuaci√≥n").getValue(Int::class.java) ?: 0
                scores.add(user to points)
            }
            scoresList = scores.sortedByDescending { it.second } // Ordenar por puntuaci√≥n
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "üèÜ Tabla de R√©cords üèÜ",
            style = MaterialTheme.typography.headlineMedium
        )
        Spacer(modifier = Modifier.height(16.dp))

        LazyColumn(
            modifier = Modifier.fillMaxHeight(0.8f), // Limitar la altura para mejor est√©tica
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            items(scoresList) { (user, points) ->
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    elevation = CardDefaults.cardElevation(4.dp)
                ) {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        Text(text = user, style = MaterialTheme.typography.bodyLarge)
                        Text(text = "$points pts", style = MaterialTheme.typography.bodyLarge)
                    }
                }
            }
        }

        Spacer(modifier = Modifier.height(16.dp))
        Button(onClick = onBack) {
            Text("Volver al Men√∫")
        }
    }
}

// üü¢ Opciones (Solo Editar Nombre)

@Composable
fun UserOptionsScreen(currentUser: String, onBack: () -> Unit) {
    var name by remember { mutableStateOf(TextFieldValue(currentUser)) }
    var isUpdating by remember { mutableStateOf(false) } // Para indicar que estamos en proceso de actualizaci√≥n
    val context = LocalContext.current // Obtener el contexto

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(24.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            elevation = CardDefaults.cardElevation(8.dp)
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(24.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "Editar Nombre",
                    style = MaterialTheme.typography.headlineMedium
                )
                Spacer(modifier = Modifier.height(16.dp))

                OutlinedTextField(
                    value = name,
                    onValueChange = { name = it },
                    label = { Text("Nombre") },
                    singleLine = true
                )
                Spacer(modifier = Modifier.height(16.dp))

                Button(
                    onClick = {
                        isUpdating = true // Empezamos la actualizaci√≥n
                        FirebaseAuth.getInstance().currentUser?.updateProfile(
                            com.google.firebase.auth.UserProfileChangeRequest.Builder()
                                .setDisplayName(name.text)
                                .build()
                        )?.addOnCompleteListener { task ->
                            isUpdating = false // Terminamos la actualizaci√≥n
                            // Aqu√≠ ya no usas un @Composable
                            if (task.isSuccessful) {
                                // Actualizaci√≥n exitosa
                                Toast.makeText(context, "Nombre actualizado exitosamente", Toast.LENGTH_SHORT).show()
                                onBack() // Volver al men√∫
                            } else {
                                // Hubo un error
                                Toast.makeText(context, "Error al actualizar el nombre", Toast.LENGTH_SHORT).show()
                            }
                        }
                    },
                    modifier = Modifier.fillMaxWidth(0.8f),
                    colors = ButtonDefaults.buttonColors(MaterialTheme.colorScheme.primary),
                    enabled = !isUpdating // Deshabilitar el bot√≥n durante la actualizaci√≥n
                ) {
                    Text("Guardar Cambios")
                }
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        Button(
            onClick = onBack,
            modifier = Modifier.fillMaxWidth(0.6f),
            colors = ButtonDefaults.buttonColors(MaterialTheme.colorScheme.secondary)
        ) {
            Text("‚¨Ö Volver")
        }
    }
}

